#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::error::AudioTagsError;
use crate::picture::MimeType;
use crate::picture::Picture;
use crate::picture::PictureType;
use crate::tag::Tag;

// Section: wire functions

fn wire_read_impl(port_: MessagePort, path: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Tag, _>(
        WrapInfo {
            debug_name: "read",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            move |task_callback| read(api_path)
        },
    )
}
fn wire_write_impl(
    port_: MessagePort,
    path: impl Wire2Api<String> + UnwindSafe,
    data: impl Wire2Api<Tag> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "write",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_path = path.wire2api();
            let api_data = data.wire2api();
            move |task_callback| write(api_path, api_data)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<MimeType> for i32 {
    fn wire2api(self) -> MimeType {
        match self {
            0 => MimeType::Png,
            1 => MimeType::Jpeg,
            2 => MimeType::Tiff,
            3 => MimeType::Bmp,
            4 => MimeType::Gif,
            5 => MimeType::None,
            _ => unreachable!("Invalid variant for MimeType: {}", self),
        }
    }
}

impl Wire2Api<PictureType> for i32 {
    fn wire2api(self) -> PictureType {
        match self {
            0 => PictureType::Other,
            1 => PictureType::Icon,
            2 => PictureType::OtherIcon,
            3 => PictureType::CoverFront,
            4 => PictureType::CoverBack,
            5 => PictureType::Leaflet,
            6 => PictureType::Media,
            7 => PictureType::LeadArtist,
            8 => PictureType::Artist,
            9 => PictureType::Conductor,
            10 => PictureType::Band,
            11 => PictureType::Composer,
            12 => PictureType::Lyricist,
            13 => PictureType::RecordingLocation,
            14 => PictureType::DuringRecording,
            15 => PictureType::DuringPerformance,
            16 => PictureType::ScreenCapture,
            17 => PictureType::BrightFish,
            18 => PictureType::Illustration,
            19 => PictureType::BandLogo,
            20 => PictureType::PublisherLogo,
            _ => unreachable!("Invalid variant for PictureType: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for AudioTagsError {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::InvalidPath => vec![0.into_dart()],
            Self::NoTags => vec![1.into_dart()],
            Self::OpenFile { message } => vec![2.into_dart(), message.into_into_dart().into_dart()],
            Self::Write { message } => vec![3.into_dart(), message.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AudioTagsError {}
impl rust2dart::IntoIntoDart<AudioTagsError> for AudioTagsError {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for MimeType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Png => 0,
            Self::Jpeg => 1,
            Self::Tiff => 2,
            Self::Bmp => 3,
            Self::Gif => 4,
            Self::None => 5,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MimeType {}
impl rust2dart::IntoIntoDart<MimeType> for MimeType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Picture {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.picture_type.into_into_dart().into_dart(),
            self.mime_type.into_into_dart().into_dart(),
            self.bytes.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Picture {}
impl rust2dart::IntoIntoDart<Picture> for Picture {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for PictureType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Other => 0,
            Self::Icon => 1,
            Self::OtherIcon => 2,
            Self::CoverFront => 3,
            Self::CoverBack => 4,
            Self::Leaflet => 5,
            Self::Media => 6,
            Self::LeadArtist => 7,
            Self::Artist => 8,
            Self::Conductor => 9,
            Self::Band => 10,
            Self::Composer => 11,
            Self::Lyricist => 12,
            Self::RecordingLocation => 13,
            Self::DuringRecording => 14,
            Self::DuringPerformance => 15,
            Self::ScreenCapture => 16,
            Self::BrightFish => 17,
            Self::Illustration => 18,
            Self::BandLogo => 19,
            Self::PublisherLogo => 20,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for PictureType {}
impl rust2dart::IntoIntoDart<PictureType> for PictureType {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for Tag {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.title.into_dart(),
            self.track_artist.into_dart(),
            self.album.into_dart(),
            self.album_artist.into_dart(),
            self.year.into_dart(),
            self.genre.into_dart(),
            self.track_number.into_dart(),
            self.track_total.into_dart(),
            self.disc_number.into_dart(),
            self.disc_total.into_dart(),
            self.duration.into_dart(),
            self.pictures.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Tag {}
impl rust2dart::IntoIntoDart<Tag> for Tag {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
