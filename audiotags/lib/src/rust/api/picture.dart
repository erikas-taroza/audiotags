// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`

/// The MIME type of the picture.
enum MimeType {
  png,
  jpeg,
  tiff,
  bmp,
  gif,
  ;
}

/// An object representing a picture metadata.
class Picture {
  /// The type of picture (ex. front cover)
  final PictureType pictureType;

  /// The mime type of the picture (ex. `image/jpg`)
  final MimeType? mimeType;

  /// The picture data, in bytes.
  final Uint8List bytes;

  const Picture({
    required this.pictureType,
    this.mimeType,
    required this.bytes,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<Picture> newInstance(
          {required PictureType pictureType,
          MimeType? mimeType,
          required List<int> bytes}) =>
      RustLib.instance.api.crateApiPicturePictureNew(
          pictureType: pictureType, mimeType: mimeType, bytes: bytes);

  @override
  int get hashCode => pictureType.hashCode ^ mimeType.hashCode ^ bytes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Picture &&
          runtimeType == other.runtimeType &&
          pictureType == other.pictureType &&
          mimeType == other.mimeType &&
          bytes == other.bytes;
}

/// The type of picture of the song.
enum PictureType {
  other,
  icon,
  otherIcon,
  coverFront,
  coverBack,
  leaflet,
  media,
  leadArtist,
  artist,
  conductor,
  band,
  composer,
  lyricist,
  recordingLocation,
  duringRecording,
  duringPerformance,
  screenCapture,
  brightFish,
  illustration,
  bandLogo,
  publisherLogo,
  ;
}
