// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.7.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'picture.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`

/// Represents the metadata of the file.
class Tag {
  /// The title of the song.
  final String? title;

  /// The artist of the song.
  final String? trackArtist;

  /// The album the song is from.
  final String? album;

  /// The artist of the album.
  final String? albumArtist;

  /// The year that this song was made.
  final int? year;

  /// The genre of the song.
  final String? genre;

  /// The position of the song in a list.
  final int? trackNumber;

  /// The total amount of songs in a list.
  final int? trackTotal;

  /// The position of the disc in a list.
  final int? discNumber;

  /// The total amount of discs in a list.
  final int? discTotal;

  /// The lyrics of the song.
  final String? lyrics;

  /// The duration of the song. Setting this field
  /// when writing will do nothing.
  final int? duration;

  /// All the pictures of the song.
  final List<Picture> pictures;

  const Tag({
    this.title,
    this.trackArtist,
    this.album,
    this.albumArtist,
    this.year,
    this.genre,
    this.trackNumber,
    this.trackTotal,
    this.discNumber,
    this.discTotal,
    this.lyrics,
    this.duration,
    required this.pictures,
  });

  static Future<Tag> default_() => RustLib.instance.api.crateApiTagTagDefault();

  /// Returns `true` if the tag has no data.
  Future<bool> isEmpty() => RustLib.instance.api.crateApiTagTagIsEmpty(
        that: this,
      );

  @override
  int get hashCode =>
      title.hashCode ^
      trackArtist.hashCode ^
      album.hashCode ^
      albumArtist.hashCode ^
      year.hashCode ^
      genre.hashCode ^
      trackNumber.hashCode ^
      trackTotal.hashCode ^
      discNumber.hashCode ^
      discTotal.hashCode ^
      lyrics.hashCode ^
      duration.hashCode ^
      pictures.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Tag &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          trackArtist == other.trackArtist &&
          album == other.album &&
          albumArtist == other.albumArtist &&
          year == other.year &&
          genre == other.genre &&
          trackNumber == other.trackNumber &&
          trackTotal == other.trackTotal &&
          discNumber == other.discNumber &&
          discTotal == other.discTotal &&
          lyrics == other.lyrics &&
          duration == other.duration &&
          pictures == other.pictures;
}
